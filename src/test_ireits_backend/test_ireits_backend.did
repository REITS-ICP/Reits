type Document = record {
    id: nat64;
    doc_type: variant { Deed; Title; Contract; Inspection; Other };
    hash: text;
    timestamp: nat64;
};

type RentalIncome = record {
    monthly_amount: nat64;
    last_distribution: nat64;
    distribution_frequency: nat64;
};

type Property = record {
    id: nat64;
    owner: principal;
    price: float64;
    location: text;
    description: text;
    status: variant { Listed; UnderContract; Sold; Tokenized };
    documents: vec Document;
    rental_income: opt RentalIncome;
    token_id: opt nat64;
};

type TokenMetadata = record {
    name: text;
    symbol: text;
    description: opt text;
    logo: opt blob;
    decimals: nat8;
    total_supply: nat64;
    circulating_supply: nat64;
    owner: principal;
    created_at: nat64;
    website: opt text;
    social_links: opt vec text;
};

type TokenStats = record {
    total_transactions: nat64;
    unique_holders: nat64;
    market_cap: nat64;
    volume_24h: nat64;
    price_change_24h: float64;
    total_staked: nat64;
    total_airdropped: nat64;
};

type TransferArgs = record {
    from: principal;
    to: principal;
    amount: nat64;
    memo: opt blob;
};

service : {
    // Collection Management
    initialize_collection: (
        name: text,
        symbol: text,
        description: text,
        royalties: nat16,
        treasury: principal,
        max_supply: opt nat64,
        logo: opt blob,
        website: opt text,
        social_links: opt vec text
    ) -> (bool);

    // Property Management
    list_property: (price: float64, location: text, description: text, rental_income: opt RentalIncome) -> (Property);
    get_property: (property_id: nat64) -> (opt Property) query;
    get_all_properties: () -> (vec Property) query;
    get_user_properties: (user: principal) -> (vec Property) query;
    add_document: (property_id: nat64, doc_type: variant { Deed; Title; Contract; Inspection; Other }, hash: text) -> (bool);
    
    // Property Tokenization
    tokenize_property: (
        property_id: nat64,
        name: text,
        symbol: text,
        description: opt text,
        total_supply: nat64,
        available_supply: nat64,
        royalty_percentage: opt nat16
    ) -> (variant { Ok: bool; Err: text });

    fractionalize_property: (
        property_id: nat64,
        shares: vec record { principal; nat16 }
    ) -> (variant { Ok: bool; Err: text });

    // RET Token Management
    initialize_ret: (owner: principal, website: opt text, social_links: opt vec text) -> (bool);
    get_ret_metadata: () -> (opt TokenMetadata) query;
    balance_of: (owner: principal) -> (nat64) query;
    staked_balance_of: (owner: principal) -> (nat64) query;
    stake: (amount: nat64, duration: nat64) -> (variant { Ok: bool; Err: text });
    unstake: () -> (variant { Ok: nat64; Err: text });
    transfer: (TransferArgs) -> (variant { Ok: bool; Err: text });
    airdrop_ret: (recipients: vec record { principal; nat64 }) -> (variant { Ok: bool; Err: text });
    get_ret_stats: () -> (TokenStats) query;
    
    // Payment Management
    initialize_payment_manager: (ret_ledger: principal) -> ();
};
